<title><%= TITLE %></title>
<div class="h-[70vh] md:h-[100vh] flex items-center justify-center ">
  <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
    <h2 class="text-3xl font-bold text-center text-gray-800 mb-6">QR-MATE</h2>

    <%- include('../partials/error') %> 
    <%- include('../partials/success') %>

    <form action="/sign-up" method="POST" id="registerForm" class="space-y-4">
      <!-- Name Field -->
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700"
          >Username</label
        >
        <input
          type="text"
          id="username"
          name="username"
          class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Enter a username"
        />
        <p id="usernameError" class="text-xs italic mt-2"></p>
      </div>

      <!-- Email Field -->
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700"
          >Email</label
        >
        <input
          type="email"
          id="email"
          name="email"
          class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Enter your email"
        />
        <p id="emailError" class="text-xs italic mt-2"></p>
      </div>

      <!-- Password Field -->
      <div>
        <label for="password" class="block text-sm font-medium text-gray-700"
          >Password</label
        >
        <input
          type="password"
          id="password"
          name="password"
          class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Enter your password"
        />
        <p id="passwordError" class="text-xs italic mt-2"></p>
      </div>

      <!-- Confirm Password Field -->
      <div>
        <label
          for="confirmPassword"
          class="block text-sm font-medium text-gray-700"
          >Confirm Password</label
        >
        <input
          type="password"
          id="confirmPassword"
          name="confirmPassword"
          class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Confirm your password"
        />
        <p id="confirmPasswordError" class="text-xs italic mt-2"></p>
      </div>

      <!-- Submit Button -->
      <div>
        <button
          type="submit"
          id="submitBtn"
          class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        >
          Register
        </button>
      </div>
    </form>

    <!-- Login Link -->
    <p class="mt-4 text-center text-gray-600">
      Already have an account?
      <a href="/sign-in" class="text-indigo-600 hover:underline">Login here</a>
    </p>
  </div>
</div>

<script>
  const username = document.getElementById("username");
  const usernameError = document.getElementById("usernameError");
  const submitButton = document.getElementById("submitBtn");

  // Debounce function to limit the rate at which the fetch request is called
  function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
      if (timeoutId) clearTimeout(timeoutId); // Clear the previous timeout
      timeoutId = setTimeout(() => {
        func(...args); // Call the actual function after the delay
      }, delay);
    };
  }

  // Function to handle the fetch request
  async function checkUsernameAvailability(usernameValue) {
    try {
      if (usernameValue.length <= 2) {
        usernameError.textContent =
          "Username must be at least 3 characters long";
        usernameError.style.color = "red";
        submitButton.disabled = true;
        submitButton.style.backgroundColor = "gray";
        return;
      }
      const response = await fetch(
        `/check-username?username=${usernameValue}`
      );
      const data = await response.json();

      if (data.success) {
        usernameError.textContent = data.message;
        usernameError.style.color = "red";
        submitButton.disabled = true;
        submitButton.style.backgroundColor = "gray";
      } else {
        usernameError.textContent = data.message;
        usernameError.style.color = "green";
        submitButton.disabled = false;
        submitButton.style.backgroundColor = "";
      }
    } catch (error) {
      console.error("Error checking username:", error);
    }
  }

  // Wrap the fetch function with debounce to limit its calls.
  const debouncedCheckUsername = debounce((e) => {
    const usernameValue = e.target.value;
    if (usernameValue.length > 0) {
      checkUsernameAvailability(usernameValue);
    }
  }, 500); // 500ms debounce delay

  // Add input event listener to the username field.
  username.addEventListener("input", debouncedCheckUsername);
</script>

<script type="module"  src="/javascripts/validation/register.js"></script>
